name: Terraform CI/CD - Multi-Environment Deployment

on:
  push:
    branches:
      - main
      - develop
      - 'release/**'
    paths:
      - 'modules/**'
      - 'environments/**'
      - '.github/workflows/**'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'modules/**'
      - 'environments/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (or "all" for sequential deployment)'
        required: true
        type: choice
        options:
          - all
          - DEV
          - QA
          - STG
          - PROD
      action:
        description: 'Terraform action'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.6.0'
  TFLINT_VERSION: 'v0.50.0'
  CHECKOV_VERSION: '3.1.0'
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

permissions:
  contents: read
  pull-requests: write
  security-events: write
  id-token: write

jobs:
  setup:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      should_deploy: ${{ steps.set-env.outputs.should_deploy }}
    steps:
      - name: Determine Environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
            echo "environment=stg" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  security-scan:
    name: Security & Compliance Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform
          output_format: cli,sarif
          output_file_path: console,checkov-results.sarif
          soft_fail: true

      - name: Upload Checkov results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'checkov-results.sarif'

      - name: Run TFSec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: '.'
          format: sarif
          soft_fail: true

  terraform-validate:
    name: Terraform Validate & Lint
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: |
          if ! terraform fmt -check -recursive; then
            echo "::warning::Terraform files need formatting. Run 'terraform fmt -recursive' locally."
            terraform fmt -recursive -diff
            exit 1
          fi

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}

      - name: Show TFLint version
        run: tflint --version

      - name: Init TFLint
        run: tflint --init

      - name: Run TFLint on Modules
        run: |
          echo "Linting modules..."
          find modules -type f -name "*.tf" -exec dirname {} \; | sort -u | while read dir; do
            echo "Checking $dir"
            tflint --chdir="$dir" --format compact
          done

      - name: Run TFLint on Environments
        run: |
          echo "Linting environments..."
          for env in dev qa stg prod; do
            echo "Checking environments/$env"
            tflint --chdir="environments/$env" --format compact
          done

      - name: Validate All Environments
        run: |
          for env in dev qa stg prod; do
            echo "Validating $env environment..."
            cd environments/$env
            terraform init -backend=false
            terraform validate
            cd ../..
          done

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [setup, terraform-validate]
    strategy:
      matrix:
        environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment != 'all' && fromJSON(format('["{0}"]', github.event.inputs.environment)) || fromJSON('["DEV", "QA", "STG", "PROD"]') }}
      max-parallel: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'all' && 1 || 4 }}
    environment: ${{ matrix.environment }}-PLAN
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Set Environment Path
        id: env-path
        run: |
          ENV_LOWER=$(echo "${{ matrix.environment }}" | tr '[:upper:]' '[:lower:]')
          echo "path=$ENV_LOWER" >> $GITHUB_OUTPUT
          echo "Environment folder: environments/$ENV_LOWER"

      - name: Terraform Init
        working-directory: ./environments/${{ steps.env-path.outputs.path }}
        run: |
          echo "Initializing Terraform for ${{ matrix.environment }}..."
          terraform init \
            -backend-config="resource_group_name=rg-tfstate-${{ steps.env-path.outputs.path }}" \
            -backend-config="storage_account_name=sttfstatewaf${{ steps.env-path.outputs.path }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=${{ steps.env-path.outputs.path }}.terraform.tfstate" || {
              echo "::error::Backend initialization failed. Make sure the storage account 'sttfstatewaf${{ steps.env-path.outputs.path }}' exists."
              echo "::error::Run: ./scripts/setup-backend.sh ${{ steps.env-path.outputs.path }} <location>"
              exit 1
            }

      - name: Terraform Plan
        id: plan
        working-directory: ./environments/${{ steps.env-path.outputs.path }}
        env:
          TF_VAR_sql_administrator_password: ${{ secrets.TF_VAR_sql_administrator_password }}
          TF_VAR_aks_admin_group_object_ids: ${{ secrets.TF_VAR_aks_admin_group_object_ids || '[]' }}
          TF_VAR_keyvault_admin_object_ids: ${{ secrets.TF_VAR_keyvault_admin_object_ids || '[]' }}
        run: |
          echo "Running terraform plan for ${{ matrix.environment }}..."
          echo "Checking for required variables..."
          
          # Run plan and capture exit code
          set +e
          terraform plan \
            -var-file=terraform.tfvars \
            -out=tfplan-${{ steps.env-path.outputs.path }} \
            -no-color 2>&1 | tee plan-output.txt
          PLAN_EXIT_CODE=$?
          set -e

          # Check if plan file was created
          if [ ! -f "tfplan-${{ steps.env-path.outputs.path }}" ]; then
            echo "::error::Plan file was not created (exit code: $PLAN_EXIT_CODE)"
            echo "::error::Plan output:"
            cat plan-output.txt
            exit 1
          fi

          echo "‚úÖ Plan file created successfully"
          exit $PLAN_EXIT_CODE

      - name: Generate Plan Summary
        if: success()
        working-directory: ./environments/${{ steps.env-path.outputs.path }}
        run: |
          terraform show -no-color tfplan-${{ steps.env-path.outputs.path }} > tfplan-${{ steps.env-path.outputs.path }}.txt

      - name: Upload Plan Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ steps.env-path.outputs.path }}
          path: |
            environments/${{ steps.env-path.outputs.path }}/tfplan-${{ steps.env-path.outputs.path }}
            environments/${{ steps.env-path.outputs.path }}/tfplan-${{ steps.env-path.outputs.path }}.txt
          retention-days: 30

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const planPath = 'environments/${{ steps.env-path.outputs.path }}/tfplan-${{ steps.env-path.outputs.path }}.txt';
            if (fs.existsSync(planPath)) {
              let plan = fs.readFileSync(planPath, 'utf8');
              if (plan.length > 64000) {
                plan = plan.substring(0, 64000) + '\n\n... (truncated)';
              }
              const output = `#### Terraform Plan - ${{ matrix.environment }} üåç
              <details><summary>Show Plan</summary>
              
              \`\`\`terraform
              ${plan}
              \`\`\`
              
              </details>
              
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }

  terraform-test:
    name: Run Pytest Integration Tests
    runs-on: ubuntu-latest
    needs: terraform-validate
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Install Python Dependencies
        working-directory: ./tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Pytest Tests
        working-directory: ./tests
        run: |
          pytest -v --tb=short --junitxml=test-results.xml
        timeout-minutes: 45

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results
          path: tests/test-results.xml

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [setup, terraform-plan, terraform-test]
    if: |
      (github.event_name == 'push' && needs.setup.outputs.should_deploy == 'true') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply' && github.event.inputs.environment != 'all')
    environment: 
      name: ${{ needs.setup.outputs.environment }}
      url: https://portal.azure.com
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ needs.setup.outputs.environment }}
          path: environments/${{ needs.setup.outputs.environment }}/

      - name: Terraform Init
        working-directory: ./environments/${{ needs.setup.outputs.environment }}
        run: |
          terraform init \
            -backend-config="resource_group_name=rg-tfstate-${{ needs.setup.outputs.environment }}" \
            -backend-config="storage_account_name=sttfstatewaf${{ needs.setup.outputs.environment }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=${{ needs.setup.outputs.environment }}.terraform.tfstate"

      - name: Terraform Apply
        working-directory: ./environments/${{ needs.setup.outputs.environment }}
        env:
          TF_VAR_sql_administrator_password: ${{ secrets.TF_VAR_sql_administrator_password }}
          TF_VAR_aks_admin_group_object_ids: ${{ secrets.TF_VAR_aks_admin_group_object_ids }}
          TF_VAR_keyvault_admin_object_ids: ${{ secrets.TF_VAR_keyvault_admin_object_ids }}
        run: |
          terraform apply -auto-approve tfplan-${{ needs.setup.outputs.environment }}

      - name: Capture Outputs
        id: outputs
        working-directory: ./environments/${{ needs.setup.outputs.environment }}
        run: |
          terraform output -json > outputs.json
          cat outputs.json

      - name: Upload Outputs Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-${{ needs.setup.outputs.environment }}
          path: environments/${{ needs.setup.outputs.environment }}/outputs.json

  # Sequential Deployment: DEV -> QA -> STG -> PROD
  apply-dev:
    name: Apply DEV
    runs-on: ubuntu-latest
    needs: [terraform-plan, terraform-test]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply' && github.event.inputs.environment == 'all'
    environment:
      name: dev
      url: https://portal.azure.com
    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-dev
          path: environments/dev/
      - name: Terraform Init
        working-directory: ./environments/dev
        run: |
          terraform init \
            -backend-config="resource_group_name=rg-tfstate-dev" \
            -backend-config="storage_account_name=sttfstatewafdev" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=dev.terraform.tfstate"
      - name: Terraform Apply
        working-directory: ./environments/dev
        env:
          TF_VAR_sql_administrator_password: ${{ secrets.TF_VAR_sql_administrator_password }}
          TF_VAR_aks_admin_group_object_ids: ${{ secrets.TF_VAR_aks_admin_group_object_ids }}
          TF_VAR_keyvault_admin_object_ids: ${{ secrets.TF_VAR_keyvault_admin_object_ids }}
        run: terraform apply -auto-approve tfplan-dev
      - name: Upload Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-dev
          path: environments/dev/outputs.json

  apply-qa:
    name: Apply QA
    runs-on: ubuntu-latest
    needs: apply-dev
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply' && github.event.inputs.environment == 'all'
    environment:
      name: qa
      url: https://portal.azure.com
    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-qa
          path: environments/qa/
      - name: Terraform Init
        working-directory: ./environments/qa
        run: |
          terraform init \
            -backend-config="resource_group_name=rg-tfstate-qa" \
            -backend-config="storage_account_name=sttfstatewafqa" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=qa.terraform.tfstate"
      - name: Terraform Apply
        working-directory: ./environments/qa
        env:
          TF_VAR_sql_administrator_password: ${{ secrets.TF_VAR_sql_administrator_password }}
          TF_VAR_aks_admin_group_object_ids: ${{ secrets.TF_VAR_aks_admin_group_object_ids }}
          TF_VAR_keyvault_admin_object_ids: ${{ secrets.TF_VAR_keyvault_admin_object_ids }}
        run: terraform apply -auto-approve tfplan-qa
      - name: Upload Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-qa
          path: environments/qa/outputs.json

  apply-stg:
    name: Apply STG
    runs-on: ubuntu-latest
    needs: apply-qa
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply' && github.event.inputs.environment == 'all'
    environment:
      name: stg
      url: https://portal.azure.com
    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-stg
          path: environments/stg/
      - name: Terraform Init
        working-directory: ./environments/stg
        run: |
          terraform init \
            -backend-config="resource_group_name=rg-tfstate-stg" \
            -backend-config="storage_account_name=sttfstatewafstg" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=stg.terraform.tfstate"
      - name: Terraform Apply
        working-directory: ./environments/stg
        env:
          TF_VAR_sql_administrator_password: ${{ secrets.TF_VAR_sql_administrator_password }}
          TF_VAR_aks_admin_group_object_ids: ${{ secrets.TF_VAR_aks_admin_group_object_ids }}
          TF_VAR_keyvault_admin_object_ids: ${{ secrets.TF_VAR_keyvault_admin_object_ids }}
        run: terraform apply -auto-approve tfplan-stg
      - name: Upload Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-stg
          path: environments/stg/outputs.json

  apply-prod:
    name: Apply PROD
    runs-on: ubuntu-latest
    needs: apply-stg
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply' && github.event.inputs.environment == 'all'
    environment:
      name: prod
      url: https://portal.azure.com
    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-prod
          path: environments/prod/
      - name: Terraform Init
        working-directory: ./environments/prod
        run: |
          terraform init \
            -backend-config="resource_group_name=rg-tfstate-prod" \
            -backend-config="storage_account_name=sttfstatewafprod" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=prod.terraform.tfstate"
      - name: Terraform Apply
        working-directory: ./environments/prod
        env:
          TF_VAR_sql_administrator_password: ${{ secrets.TF_VAR_sql_administrator_password }}
          TF_VAR_aks_admin_group_object_ids: ${{ secrets.TF_VAR_aks_admin_group_object_ids }}
          TF_VAR_keyvault_admin_object_ids: ${{ secrets.TF_VAR_keyvault_admin_object_ids }}
        run: terraform apply -auto-approve tfplan-prod
      - name: Upload Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-prod
          path: environments/prod/outputs.json

  post-deployment-validation:
    name: Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: [setup, terraform-apply, apply-dev, apply-qa, apply-stg, apply-prod]
    if: |
      always() && 
      (needs.terraform-apply.result == 'success' || 
       needs.apply-prod.result == 'success')
    steps:
      - uses: actions/checkout@v4

      - name: Download Outputs (Single Environment)
        if: needs.terraform-apply.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: terraform-outputs-${{ needs.setup.outputs.environment }}

      - name: Download All Outputs (Sequential Deployment)
        if: needs.apply-prod.result == 'success'
        uses: actions/download-artifact@v4
        with:
          pattern: terraform-outputs-*
          merge-multiple: true

      - name: Validate Deployment
        run: |
          echo "Validating deployment..."
          for output_file in terraform-outputs-*.json outputs.json; do
            if [ -f "$output_file" ]; then
              echo "=== $output_file ==="
              cat "$output_file" | jq '.' || true
            fi
          done

      - name: Health Check Summary
        run: |
          echo "## Deployment Summary for ${{ needs.setup.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Infrastructure deployed successfully" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: ${{ needs.setup.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- Timestamp: $(date)" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [setup, terraform-apply, apply-dev, apply-qa, apply-stg, apply-prod]
    if: always()
    steps:
      - name: Determine Status
        id: status
        run: |
          if [ "${{ needs.terraform-apply.result }}" == "success" ] || [ "${{ needs.apply-prod.result }}" == "success" ]; then
            echo "status=‚úÖ Success" >> $GITHUB_OUTPUT
            echo "color=28a745" >> $GITHUB_OUTPUT
          else
            echo "status=‚ùå Failed" >> $GITHUB_OUTPUT
            echo "color=dc3545" >> $GITHUB_OUTPUT
          fi

      - name: Create Deployment Summary
        run: |
          echo "## Deployment Status: ${{ steps.status.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event.inputs.environment }}" == "all" ]; then
            echo "### Sequential Deployment (DEV‚ÜíQA‚ÜíSTG‚ÜíPROD)" >> $GITHUB_STEP_SUMMARY
            echo "- DEV: ${{ needs.apply-dev.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- QA: ${{ needs.apply-qa.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- STG: ${{ needs.apply-stg.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- PROD: ${{ needs.apply-prod.result }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Single Environment Deployment" >> $GITHUB_STEP_SUMMARY
            echo "- Environment: ${{ needs.setup.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
            echo "- Status: ${{ needs.terraform-apply.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
