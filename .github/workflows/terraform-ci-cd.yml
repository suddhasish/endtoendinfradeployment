name: Terraform CI/CD (Plan → Test → Apply → Validate)

on:
  push:
    branches:
      - main
      - develop
      - 'release/**'
    paths:
      - 'terraform/**'
      - '.github/workflows/**'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - dev
          - qa
          - stg
          - prod
      action:
        description: 'Terraform action'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.6.0'
  TFLINT_VERSION: 'v0.50.0'
  CHECKOV_VERSION: '3.1.0'
  # Use OIDC if you have it configured and prefer workload identity:
  ARM_USE_OIDC: 'true'

permissions:
  contents: read
  pull-requests: write
  id-token: write   # required for OIDC auth if used

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      should_deploy: ${{ steps.set-env.outputs.should_deploy }}
    steps:
      - name: Determine Environment
        id: set-env
        run: |
          # workflow_dispatch can override; otherwise map branch to env
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
            echo "environment=stg" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  security-scan:
    name: Security & Compliance Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Trivy config scan (SARIF)
        uses: aquasecurity/trivy-action@v1
        with:
          scan-type: 'config'
          scan-ref: 'terraform/'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      - name: Run Checkov (Terraform)
        uses: bridgecrewio/checkov-action@v14
        with:
          directory: terraform/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
      - name: Upload Checkov SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

  terraform-validate:
    name: Terraform Validate & Lint
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - name: Terraform fmt - check
        run: terraform fmt -check -recursive terraform/
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}
      - name: Init & Validate (dev env)
        run: |
          cd terraform/environments/dev
          terraform init -backend=false
          terraform validate

  terraform-plan:
    name: Terraform Plan (matrix)
    runs-on: ubuntu-latest
    needs: [setup, terraform-validate]
    strategy:
      matrix:
        environment: [dev, qa, stg, prod]
    outputs:
      # propagate plan artifact name if needed
      plan-path: tfplan-${{ matrix.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          allow-no-subscriptions: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init (env)
        run: |
          cd terraform/environments/${{ matrix.environment }}
          terraform init \
            -backend-config="resource_group_name=rg-tfstate-${{ matrix.environment }}" \
            -backend-config="storage_account_name=sttfstate${{ matrix.environment }}$(echo ${{ github.repository }} | md5sum | cut -c1-8)" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=terraform.tfstate"

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform/environments/${{ matrix.environment }}
          terraform plan -var-file=terraform.tfvars -out=tfplan-${{ matrix.environment }} -no-color
        continue-on-error: true

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ matrix.environment }}
          path: terraform/environments/${{ matrix.environment }}/tfplan-${{ matrix.environment }}

      - name: Save Plan Text
        run: |
          cd terraform/environments/${{ matrix.environment }}
          terraform show -no-color tfplan-${{ matrix.environment }} > tfplan-${{ matrix.environment }}.txt

      - name: Comment PR with Plan (if PR)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = 'terraform/environments/${{ matrix.environment }}/tfplan-${{ matrix.environment }}.txt';
            if (fs.existsSync(path)) {
              let plan = fs.readFileSync(path, 'utf8');
              if (plan.length > 64000) plan = plan.substring(0,64000) + '\n... (truncated)';
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## Terraform Plan - ${{ matrix.environment }}\n\`\`\`\n${plan}\n\`\`\``
              });
            }

  terraform-cost-estimation:
    name: Cost Estimation (Infracost)
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - name: Download Plan Artifacts
        uses: actions/download-artifact@v4
        with:
          path: plans
      - name: Setup Infracost
        uses: infracost/actions/setup@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}
      - name: Generate Cost Estimate
        run: |
          infracost breakdown --path terraform/ --format json --out-file /tmp/infracost.json || true
      - name: Post Cost Comment
        if: always()
        run: |
          infracost comment github --path /tmp/infracost.json \
            --repo $GITHUB_REPOSITORY \
            --pull-request ${{ github.event.pull_request.number }} \
            --github-token ${{ secrets.GITHUB_TOKEN }} \
            --behavior update || true

  terraform-test:
    name: Terraform Integration Tests (Terratest)
    runs-on: ubuntu-latest
    needs: terraform-validate
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      - name: Run Terratest
        run: |
          cd terraform/tests
          go test -v -timeout 30m

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [setup, terraform-plan, terraform-test]
    if: |
      (github.event_name == 'push' && needs.setup.outputs.should_deploy == 'true') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ needs.setup.outputs.environment }}
          path: terraform/environments/${{ needs.setup.outputs.environment }}/

      - name: Terraform Init
        run: |
          cd terraform/environments/${{ needs.setup.outputs.environment }}
          terraform init \
            -backend-config="resource_group_name=rg-tfstate-${{ needs.setup.outputs.environment }}" \
            -backend-config="storage_account_name=sttfstate${{ needs.setup.outputs.environment }}$(echo ${{ github.repository }} | md5sum | cut -c1-8)" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=terraform.tfstate"

      - name: Terraform Apply from Plan
        run: |
          cd terraform/environments/${{ needs.setup.outputs.environment }}
          terraform apply -auto-approve tfplan-${{ needs.setup.outputs.environment }}

      - name: Capture and Upload Outputs
        run: |
          cd terraform/environments/${{ needs.setup.outputs.environment }}
          terraform output -json > outputs.json
      - name: Upload Outputs Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-${{ needs.setup.outputs.environment }}
          path: terraform/environments/${{ needs.setup.outputs.environment }}/outputs.json

  post-deployment-tests:
    name: Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: terraform-apply
    steps:
      - uses: actions/checkout@v4
      - name: Download Outputs Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-outputs-${{ needs.setup.outputs.environment }}
      - name: Validate AKS (example)
        run: |
          jq -r '.aks_cluster_fqdn.value' outputs.json > aks_fqdn.txt || true
          echo "AKS FQDN: $(cat aks_fqdn.txt || echo 'none')"
          # Optionally validate kubectl connectivity after configuring credentials

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [terraform-apply]
    if: always()
    steps:
      - name: Post status comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const state = '${{ needs.terraform-apply.result }}' === 'success' ? '✅ Success' : '❌ Failed';
            github.rest.issues.createComment({
              issue_number: github.context.payload.pull_request ? github.context.payload.pull_request.number : 0,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Deployment to ${{ needs.setup.outputs.environment }}: ${state}`
            });